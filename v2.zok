from "./base64" import fromBase64;
from "EMBED" import u32_to_bits as u32ToBits;
from "EMBED" import u32_from_bits as u32FromBits;
from "EMBED" import u8_to_bits as u8ToBits;
from "EMBED" import u8_from_bits as u8FromBits;
import "hashes/sha256/sha256" as sha256;

const u32 SUB_LENGTH = 30; // Length of sub claim, including SUB_START and SUB_END. SHOULD NOT BE MORE THAN 48, OTHERWISE RECONSIDER THIS DESIGN (NEED TO LEAVE 16 BYTES FOR SECURE RANDOMNESS)
const u32 SUB_SECRET_LENGTH = 64 - SUB_LENGTH;
// assert(SUB_SECRET_LENGTH > 15);
const u8[8] SUB_START = [ 44, 34, 15, 17, 98, 34, 58, 34]; // U8 representation of `,"sub":"`
const u8[3] SUB_END = [34, 44, 34]; // U8 representation of `","`
// const u8[] AUD = []; // U8 representation of 

// returns a substring of length S, starting at fullString[idx];
def substringAt<F,S>(u8[F] fullString, u32 idx) -> u8[S] {
	u8[S] mut r = [0; S];
  for u32 i in 0..S {
    r[i] = fullString[idx + i];
	}
  return r;
}

// TODO: make this a util and PR to ZoKrates?
// converts number from a 4-byte string to a u32 integer
def parseUInt32(u8[4] string) -> u32 {
    bool[32] mut asBits = [false; 32];
    for u32 i in 0..4 {
        u8 asU8 = string[i] - 48;
        bool[8] bits = u8ToBits(asU8);
        for u32 j in 0..8 {
            asBits[i+j] = bits[j];
        }
    }
    return u32FromBits(asBits);
}

// Flatten a N*16 array of u32 to a 1-dimensional array of bytes
def flattenedToBytes<N,F>(u32[N][16] nBy16Arr) -> u8[F] {
  u8[N*128] mut flattened = [0; N*128];
  u32 mut iTimes64 = 0;
  u32 mut iTimes64PlusJTimes4 = 0;
  for u32 i in 0..N {
    iTimes64 = 64 * i;
    for u32 j in 0..16 {
      iTimes64PlusJTimes4 = iTimes64 + 4 * j;
      // iTimes16TimesJTimes8 = iTimes16 * j * 8
      bool[32] newBits = u32ToBits(nBy16Arr[i][j]);
      flattened[iTimes64PlusJTimes4] = u8FromBits(newBits[0..8]);
      flattened[iTimes64PlusJTimes4+1] = u8FromBits(newBits[8..16]);
      flattened[iTimes64PlusJTimes4+2] = u8FromBits(newBits[16..24]);
      flattened[iTimes64PlusJTimes4+3] = u8FromBits(newBits[24..32]);
    }
  }
  return flattened;
}


def verifyJWT<N>(private u32[N][16] paddedJwt, u32[8] jwtHash, private u32 subIdx, private u32[SUB_SECRET_LENGTH] subSecret, u32[8] subCommitment, private u32 expIdx, u32 expGreaterThan) {
  // Flatten to bytes to search for aud, sub, and exp substring
  u8[N*128] flattened = flattenedToBytes(paddedJwt);
  u8[SUB_LENGTH] sub = substringAt(flattened, subIdx);
  // checkAud(flattened, aud, audIdx);
  assert(sha256(paddedJwt) == jwtHash);
  return;
}


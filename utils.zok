from "EMBED" import u32_to_bits as u32ToBits;
from "EMBED" import u32_from_bits as u32FromBits;
from "EMBED" import u8_to_bits as u8ToBits;
from "EMBED" import u8_from_bits as u8FromBits;
// Flatten a N*16 array of u32 to a 1-dimensional array of bytes
def flatten<N,F>(u32[N][16] nBy16Arr) -> u8[F] {
  // QUESTION: SHOULDN'T IT BE N*64???!!!
  u8[N*64] mut flattened = [0; N*64];
  u32 mut iTimes64 = 0;
  u32 mut iTimes64PlusJTimes4 = 0;
  for u32 i in 0..N {
    iTimes64 = 64 * i;
    for u32 j in 0..16 {
      iTimes64PlusJTimes4 = iTimes64 + 4 * j;
      // iTimes16TimesJTimes8 = iTimes16 * j * 8
      bool[32] newBits = u32ToBits(nBy16Arr[i][j]);
      flattened[iTimes64PlusJTimes4] = u8FromBits(newBits[0..8]);
      flattened[iTimes64PlusJTimes4+1] = u8FromBits(newBits[8..16]);
      flattened[iTimes64PlusJTimes4+2] = u8FromBits(newBits[16..24]);
      flattened[iTimes64PlusJTimes4+3] = u8FromBits(newBits[24..32]);
    }
  }
  return flattened;
}

// does the opposite of flatten -- PR?
def unflatten<F,N>(u8[F] flattened) -> u32[N][16] {
  // 64 OR 128?! 
  assert(N*64 == F);
  u32[N][16] mut nBy16Arr = [[0; 16]; N];
  for u32 i in 0..N {
    for u32 j in 0..16 {
        bool[32] mut nextU32AsBits = [false; 32];
        for u32 k in 0..4 {
            bool[8] newBits = u8ToBits(flattened[i*64+j*4+k]);
            for u32 l in 0..8 {
                nextU32AsBits[k*8+l] = newBits[l];
            }
        }
        nBy16Arr[i][j] = u32FromBits(nextU32AsBits);
    }
  }
  return nBy16Arr;
}


// Returns a substring of length S, starting at fullString[idx];
def substringAt<F,S>(u8[F] fullString, u32 idx) -> u8[S] {
	u8[S] mut r = [0; S];
  for u32 i in 0..S {
    r[i] = fullString[idx + i];
	}
  return r;
}

// Converts number from a 4-byte string to a u32 integer
def parseUInt32(u8[4] string) -> u32 {
    bool[32] mut asBits = [false; 32];
    for u32 i in 0..4 {
        u8 asU8 = string[i] - 48;
        bool[8] bits = u8ToBits(asU8);
        for u32 j in 0..8 {
            asBits[i+j] = bits[j];
        }
    }
    return u32FromBits(asBits);
}
/* WARNING: the base64 conversion does not check the input is a valid base64 string
 * If it's invalid, this will give invalid outputs! This is optimized for efficiency, not safety
 * Note that this is not unusual: Javascript's Buffer.from(x, "base64") also gives invalid output rather than errors
 * However, I do not gaurentee this incorrect output is the same as JS' incorrect output
 * This is extremely efficient, taking N constraints where N is input length in bytes. Checking correctness of input would likely reduce
 * this efficiency. It would also eliminate use cases, such as JWTs where there is an invalid base64 character, ".". 
 * For the best of both worlds, it may be useful to make a separate function which checks for valid base64 encoding, so developers can
 * use either or both functions depending on the circumstances 
*/ 

from "EMBED" import u8_from_bits;
from "EMBED" import u8_to_bits;
from "./utils" import u8_array_to_bool_array, bool_array_to_u8_array;



//---------------base64-------------//

// char A-Z is 65-90, stored in 8bits char, base64 A-Z is 0-25, stored just in the 6bits necessary. 
// Therefore, uppercase chars can be converted to base64 by subtracting 65 (and discarding the first two bits of the 8-bit output)
// The anything above 64 and below 91 can shifted this way by 65 to convert to base64
const u8 upperCaseEnd = 91;
const u8 upperCaseOffset = 65;

// Same for lowercase, but with an offset of 71 
const u8 lowerCaseEnd = 123;
const u8 lowerCaseOffset = 71;

const u8 numberEnd = 58;
const u8 numberOffset = 4;

// +, /, and = don't need to be subtracted; they can just be replaced:
const u8 charPlus = 43;
const u8 b64Plus = 62;
const u8 charForwardSlash = 47;
const u8 b64ForwardSlash = 63;
const u8 charEquals = 61;
const u8 b64Equals = 0; //= padding treated as 0

// NOTE: this assumes input is of length divisible by 4 and output is of length input/4*3
// WARNING: this does not check it's a valid base64 string, and if it's not, this will give invalid outputs! This is optimized for efficiency, not safety
def fromBase64<I,O>(u8[I] input) -> u8[O] { //can make output shorter
    assert(I % 4 == 0);
    assert((I/4)*3 == O);
    bool[O*8] mut out = [false; O*8];
    for u32 i in 0..I {
        // In ascending order, checks that input is +, then /, then less than the highest uppercase letter, then less than the highest number, then less than the highest lowercase letter. 
        // If any of these checks are true, it does the appropriate replacement, otherwise checks the next condition
        // Currently, ZoKrates only supports one-line if statements such as ternary
        u8 converted = (input[i] == charPlus ? b64Plus : (input[i] == charForwardSlash ? b64ForwardSlash : (input[i] == charEquals ? b64Equals :(input[i] < numberEnd ? input[i] + numberOffset : (input[i] < upperCaseEnd ? input[i] - upperCaseOffset : input[i] - lowerCaseOffset)))));
        bool[8] bin = u8_to_bits(converted);
        out[i*6] = bin[2];
        out[i*6+1] = bin[3];
        out[i*6+2] = bin[4];
        out[i*6+3] = bin[5];
        out[i*6+4] = bin[6];
        out[i*6+5] = bin[7];
    }
    return bool_array_to_u8_array(out);
}

from "./root.zok" import u32sToU8s, flattenedToBytes, checkMask, maskString, substringAt, hasSubstringAt, checkAud, checkSub, checkExp, checkJwt
import "hashes/sha256/sha256"

def testCheckMask() -> bool:
    // Valid mask with 1s followed by 0s followed by 1s
    assert(checkMask([255, 0, 255]))
    // Valid mask with 1s followed by 0s followed by 1s
    assert(checkMask([255, 255, 255, 0, 255]))
    // Valid mask with 1s followed by 0s followed by 1s
    assert(checkMask([255, 255, 255, 0, 0, 0, 0, 255, 255]))

    // Valid masks with 1s followed by 0s
    assert(checkMask([1,0]))
    assert(checkMask([1,1,0]))
    assert(checkMask([1,0,0]))

    /* Should these b valid? I don't c ynot nor do i c y */
    // Valid mask with 0s followed by 1s followed by 0s
    assert(checkMask([0, 255, 0, 0]))
    // Valid masks with 0s followed by 1s
    assert(checkMask([0,1]))
    assert(checkMask([0,0,1]))
    assert(checkMask([0,1,1]))


    // invalid mask with all 1s
    assert(!checkMask([255, 255, 255, 255, 255, 255]))
    // invalid mask with all 0s
    assert(!checkMask([0, 0, 0, 0, 0, 0]))

    // Invalid mask with bytes that neither 255 nor 0
    assert(!checkMask([0,1,2,3,6]))

    // Invalid mask with too many flips between 0s and 255s
    assert(!checkMask([0, 0, 255, 255, 0, 255]))

    return true


def testMaskString() -> bool:
    assert(maskString([1,2,3],[0,0,0]) == [0,0,0])
    assert(maskString([0,0,0],[1,0,1]) == [0,0,0])
    assert(maskString([1,2,3],[255,255,255]) == [1,2,3])
    assert(maskString([1,2,3],[255,0,255]) == [1,0,3])
    return true

def testSubstringAt() -> bool:
    assert(substringAt::<3,2>([30,42,69], 1) == [42,69])
    assert(substringAt::<4,4>([30,42,69,255], 0) == [30,42,69,255])
    assert(substringAt::<4,2>([30,42,69,255], 0) == [30,42])
    assert(substringAt::<2,1>([67,69], 1) == [69])
    assert(substringAt::<1,1>([42], 0) == [42])

    return true

def testHasSubstringAt() -> bool:
    assert(hasSubstringAt([30,42,69], [42,69], 1))
    assert(!hasSubstringAt([30,40,69], [42,69], 1))
    assert(hasSubstringAt([42], [42], 0))
    assert(hasSubstringAt([42,69], [42], 0))
    assert(!hasSubstringAt([42,69], [67], 1))
    assert(!hasSubstringAt([42], [43], 0))
    return true

def testFlatten() -> bool:
    assert(flattenedToBytes::<1,128>([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]) == [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
    assert(!(flattenedToBytes::<1,128>([[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]) == [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]))
    assert(flattenedToBytes::<1,128>([[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]) == [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
    assert(flattenedToBytes::<2,256>([[4294967295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]) == [255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
    return true

def testU32ToU8s() -> bool:
    assert(u32sToU8s::<2,8>([2,0]) == [0,0,0,2,0,0,0,0])
    return true

def testCheckAud() -> bool:
    assert( checkAud([69,12,144,6,140,1,0,9,12], [144,6,140], 2))
    assert(!checkAud([69,12,169,6,140,1,0,9,12], [144,6,140], 2))
    assert(!checkAud([69,12,169,6,140,1,0,9,12], [169,6,140], 1))
    assert( checkAud([69,12,169,6,140,1,0,9,12], [169,6,140], 2))
    return true

def testCheckSub() -> bool:
    assert( checkSub([69,42,0,0,69,42,7,69,69,69,69,1], [255,255,255,255,0,0,0], [42,7,69,69,0,0,0], 5))
    assert(!checkSub([69,42,0,0,69,42,7,69,79,69,69,1], [255,255,255,255,0,0,0], [42,7,69,69,0,0,0], 5))
    assert(!checkSub([69,42,0,0,69,42,7,69,69,69,69,1], [255,255,255,0  ,0,0,0], [42,7,69,69,0,0,0], 5))
    assert(!checkSub([69,42,0,0,69,42,7,69,69,69,69,1], [255,255,255,255,0,0,0], [42,7,69, 0,0,0,0], 5))
    assert(!checkSub([69,42,0,0,69,42,7,69,69,69,69,1], [255,255,255,255,0,0,0], [42,7,69,69,0,0,0], 4))


    return true

def testCheckExp() -> bool:
    assert(checkExp([[0,1,2,5,8,69,103032949,1655252511,8000,3,9,1,69,10,3, 69]], 1655252510, [0,7]))
    assert(!checkExp([[0,1,2,5,8,69,103032949,1655252511,8000,3,9,1,69,10,3, 69]], 1655252512, [0,7]))
    assert(!checkExp([[0,1,2,5,8,69,103032949,1655252511,8000,3,9,1,69,10,3, 69]], 1655252510, [0,6]))
    assert(!checkExp([[0,1,2,5,8,69,103032949,1655252511,8000,3,9,1,69,10,3, 69], [0,1,2,5,8,69,103032949,1655252509,8000,3,9,1,69,10,3, 69]], 1655252510, [1,7]))
    assert(checkExp([[0,1,2,5,8,69,103032949,1655252511,8000,3,9,1,69,10,3, 69], [0,1,2,5,8,69,103032949,1655252590,8000,3,9,1,69,10,3, 69]], 1655252510, [1,7]))
    return true

def testCheckJwt() -> bool:
    // u32[8][16] googlePaddedPreimage = [[1702447730,1633112425,1332300407,1668102507,1683443248,1633106293,1280784761,1496476779,1280784761,1517891635,1632064116,1514688051,1498958454,1664246650,1513254961,1634547764],[1498899507,1682392630,1513256055,1297561969,1668893043,1231898227,1517898038,1231833684,1298814258,1231958062,1702447720,1682323823,1498959471,1231712105,1648834924,1330071153],[1298810480,1415071098,1297499758,1446071877,1331186296,1517898099,1231898161,1514359094,1231767121,1430466894,1430616138,1296390738,1433163351,1382766156,1414949977,1231648617],[1664308841,1231712105,1296318839,1296248951,1296318841,1280592250,1296328564,1330926968,1316571507,1231898161,1682401382,1682402420,1515407670,1297373489,1297369395,1316637048],[1329821545,1633177210,1231712105,1632129584,1665682742,1480800611,1278359929,1496476779,1282226553,1517898099,1231902260,1665354038,1297373489,1297370419,1314154362,1299806057],[1513253938,1515664742,1651328628,1515407670,1231762792,1651328626,1229272432,1632061043,1231648617,1633109552,1231712120,1315591544,1298818869,1313099130,1279478389,1647457642],[1515407670,1231971439,1498960492,1684887161,1231648617,1517110900,1633122357,1479685480,1649890665,1332300364,1632061043,1664238953,1279478385,1682402153,1332300081,1500333431],[1498704760,1313026411,1314347384,1280594226,1316640116,1330071861,1297297772,1298819959,1516921648,1330923827,1514426729,1716617216,0,0,0,3952]]
    // u32[8] googleHash = [1430026552,2342630845,2007623219,2509188588,218435145,3526213489,2255769372,843489774]
    u32[3][16] preimg = [[1702447730,1633112425,1332300406,1498899546,1231958062,1702447722,1668109931,1668892982,1231831673,1647530614,1496463731,1446204013,1231648617,1498961515,1231712105,1513239926],[1664248954,1231648617,1668105845,1514359094,1231834490,1395738931,1464300646,1433101107,1378907202,1500272200,1362250345,1313362228,1634495537,1433102412,1450012782,1664108116],[1699109239,1296382330,1496405353,1279478380,1699234153,1332300152,1315591544,1299863857,1298814330,1231958144,0,0,0,0,0,1336]]
    u32[8] hash = [3061472856,343516747,3538476305,3326575927,2228721217,2069433080,3190598334,2108440221]
    // assert(sha256(preimg) == hash)
    u8[17] aud = 
    u32 audIdx = 
    u8[64] maskedSub = 
    u32 subIdx = 
    u8[64] subMask = 
    u32 expGreaterThan =
    u8 expIdx =
    return true

def main(): 
    bool z = testCheckMask()
    bool x = testMaskString()
    bool c = testSubstringAt()
    bool v = testHasSubstringAt()
    bool b = testCheckAud()
    bool n = testCheckSub()
    bool m = testCheckExp()
    bool s = testU32ToU8s()
    bool a = testFlatten()
    bool qwertyuiopasdfghjkl = testCheckJwt()
    return
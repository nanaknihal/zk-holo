from "./root.zok" import u32sToU8s, flattenedToBytes, checkMask, maskString, substringAt, hasSubstringAt, checkAud, checkSub, checkExp, checkJwt

def testCheckMask() -> bool:
    // Valid mask with 1s followed by 0s followed by 1s
    assert(checkMask([255, 0, 255]))
    // Valid mask with 1s followed by 0s followed by 1s
    assert(checkMask([255, 255, 255, 0, 255]))
    // Valid mask with 1s followed by 0s followed by 1s
    assert(checkMask([255, 255, 255, 0, 0, 0, 0, 255, 255]))

    // Valid masks with 1s followed by 0s
    assert(checkMask([1,0]))
    assert(checkMask([1,1,0]))
    assert(checkMask([1,0,0]))

    /* Should these b valid? I don't c ynot nor do i c y */
    // Valid mask with 0s followed by 1s followed by 0s
    assert(checkMask([0, 255, 0, 0]))
    // Valid masks with 0s followed by 1s
    assert(checkMask([0,1]))
    assert(checkMask([0,0,1]))
    assert(checkMask([0,1,1]))


    // invalid mask with all 1s
    assert(!checkMask([255, 255, 255, 255, 255, 255]))
    // invalid mask with all 0s
    assert(!checkMask([0, 0, 0, 0, 0, 0]))

    // Invalid mask with bytes that neither 255 nor 0
    assert(!checkMask([0,1,2,3,6]))

    // Invalid mask with too many flips between 0s and 255s
    assert(!checkMask([0, 0, 255, 255, 0, 255]))

    return true


def testMaskString() -> bool:
    assert(maskString([1,2,3],[0,0,0]) == [0,0,0])
    assert(maskString([0,0,0],[1,0,1]) == [0,0,0])
    assert(maskString([1,2,3],[255,255,255]) == [1,2,3])
    assert(maskString([1,2,3],[255,0,255]) == [1,0,3])
    return true

def testSubstringAt() -> bool:
    assert(substringAt::<3,2>([30,42,69], 1) == [42,69])
    assert(substringAt::<4,4>([30,42,69,255], 0) == [30,42,69,255])
    assert(substringAt::<4,2>([30,42,69,255], 0) == [30,42])
    assert(substringAt::<2,1>([67,69], 1) == [69])
    assert(substringAt::<1,1>([42], 0) == [42])

    return true

def testHasSubstringAt() -> bool:
    assert(hasSubstringAt([30,42,69], [42,69], 1))
    assert(!hasSubstringAt([30,40,69], [42,69], 1))
    assert(hasSubstringAt([42], [42], 0))
    assert(hasSubstringAt([42,69], [42], 0))
    assert(!hasSubstringAt([42,69], [67], 1))
    assert(!hasSubstringAt([42], [43], 0))
    return true

def testFlatten() -> bool:
    assert(flattenedToBytes::<1,128>([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]) == [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
    assert(!(flattenedToBytes::<1,128>([[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]) == [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]))
    assert(flattenedToBytes::<1,128>([[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]) == [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
    assert(flattenedToBytes::<2,256>([[4294967295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]) == [255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
    return true

def testU32ToU8s() -> bool:
    assert(u32sToU8s::<2,8>([2,0]) == [0,0,0,2,0,0,0,0])
    return true

def testCheckAud() -> bool:
    return true

def testCheckSub() -> bool:
    return true

def testCheckExp() -> bool:
    assert(checkExp([[0,1,2,5,8,69,103032949,1655252511,8000,3,9,1,69,10,3, 69]], 1655252510, [0,7]))
    assert(!checkExp([[0,1,2,5,8,69,103032949,1655252511,8000,3,9,1,69,10,3, 69]], 1655252512, [0,7]))
    assert(!checkExp([[0,1,2,5,8,69,103032949,1655252511,8000,3,9,1,69,10,3, 69]], 1655252510, [0,6]))
    assert(!checkExp([[0,1,2,5,8,69,103032949,1655252511,8000,3,9,1,69,10,3, 69], [0,1,2,5,8,69,103032949,1655252509,8000,3,9,1,69,10,3, 69]], 1655252510, [1,7]))
    assert(checkExp([[0,1,2,5,8,69,103032949,1655252511,8000,3,9,1,69,10,3, 69], [0,1,2,5,8,69,103032949,1655252590,8000,3,9,1,69,10,3, 69]], 1655252510, [1,7]))
    return true

def testCheckJwt() -> bool:
    return true

def main(): 
    bool z = testCheckMask()
    bool x = testMaskString()
    bool c = testSubstringAt()
    bool v = testHasSubstringAt()
    bool b = testCheckAud()
    bool n = testCheckSub()
    bool m = testCheckExp()
    bool s = testU32ToU8s()
    bool a = testFlatten()
    bool qwertyuiopasdfghjkl = testCheckJwt()
    return
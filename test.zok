from "./root.zok" import checkMask, maskString, substringAt, hasSubstringAt, checkAud, checkExp, checkSub, checkJwt

def testCheckMask() -> bool:
    // Valid mask with 1s followed by 0s followed by 1s
    assert(checkMask([255, 0, 255]))
    // Valid mask with 1s followed by 0s followed by 1s
    assert(checkMask([255, 255, 255, 0, 255]))
    // Valid mask with 1s followed by 0s followed by 1s
    assert(checkMask([255, 255, 255, 0, 0, 0, 0, 255, 255]))

    // Valid masks with 1s followed by 0s
    assert(checkMask([1,0]))
    assert(checkMask([1,1,0]))
    assert(checkMask([1,0,0]))

    /* Should these b valid? I don't c ynot nor do i c y */
    // Valid mask with 0s followed by 1s followed by 0s
    assert(checkMask([0, 255, 0, 0]))
    // Valid masks with 0s followed by 1s
    assert(checkMask([0,1]))
    assert(checkMask([0,0,1]))
    assert(checkMask([0,1,1]))


    // invalid mask with all 1s
    assert(!checkMask([255, 255, 255, 255, 255, 255]))
    // invalid mask with all 0s
    assert(!checkMask([0, 0, 0, 0, 0, 0]))

    // Invalid mask with bytes that neither 255 nor 0
    assert(!checkMask([0,1,2,3,6]))

    // Invalid mask with too many flips between 0s and 255s
    assert(!checkMask([0, 0, 255, 255, 0, 255]))

    return true


def testMaskString() -> bool:
    assert(maskString([1,2,3],[0,0,0]) == [0,0,0])
    assert(maskString([0,0,0],[1,0,1]) == [0,0,0])
    assert(maskString([1,2,3],[255,255,255]) == [1,2,3])
    assert(maskString([1,2,3],[255,0,255]) == [1,0,3])
    return true

def testSubstringAt() -> bool:
    return true

def testHasSubstringAt() -> bool:
    return true

def testCheckAud() -> bool:
    return true

def testCheckSub() -> bool:
    return true

def testCheckExp() -> bool:
    return true

def testCheckJwt() -> bool:
    return true
def main(): 
    bool z = testCheckMask()
    bool x = testMaskString()
    bool c = testSubstringAt()
    bool v = testHasSubstringAt()
    bool b = testCheckAud()
    bool n = testCheckSub()
    bool m = testCheckExp()
    bool qwertyuiopasdfghjkl = testCheckJwt()
    return